from aiogram import types
from aiogram import Dispatcher
from bot.utils.user_data import set_user_step, get_user_step, user_data, clear_user_data
from bot.keyboards.defaultkeyboards import KeyboardChooseCourse1Markup, KeyboardChooseCourse2Markup, FacultyKeyboard, OptionKeyboard
import logging
from bot.config import ADMIN_CHAT_ID  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –ª–∏—à–µ ADMIN_CHAT_ID —ñ–∑ config


async def apply_handler(message: types.Message):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É ¬´–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –æ–±–º—ñ–Ω —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤¬ª."""
    await message.answer('–û–±–µ—Ä—ñ—Ç—å –≤–∞—à —ñ–Ω—Å—Ç–∏—Ç—É—Ç:', reply_markup=FacultyKeyboard)
    set_user_step(message.chat.id, 'faculty')


async def collect_data(message: types.Message):
    """–ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±–º—ñ–Ω —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤."""
    user_id = message.chat.id
    step = get_user_step(user_id)

    if step == 'faculty':
        user_data[user_id]['faculty'] = message.text
        await message.answer('–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –∫—É—Ä—Å—É:', reply_markup=KeyboardChooseCourse2Markup)
        set_user_step(user_id, 'course')

    elif step == 'faculty_question':
        user_data[user_id]['faculty'] = message.text
        await message.answer('–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –∫—É—Ä—Å—É:', reply_markup=KeyboardChooseCourse1Markup)
        set_user_step(user_id, 'course')

    elif step == 'course':
        user_data[user_id]['course'] = message.text
        await message.answer('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≥—Ä—É–ø—É:', reply_markup=types.ReplyKeyboardRemove())
        set_user_step(user_id, 'group')

    elif step == 'group':
        user_data[user_id]['group'] = message.text
        await message.answer('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—ñ –ü–Ü–ë:')
        set_user_step(user_id, 'name')

    elif step == 'name':
        user_data[user_id]['name'] = message.text
        await message.answer('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤ º—è–∑–∫—É –∑ –≤–∞–º–∏:')
        set_user_step(user_id, 'phone')

    elif step == 'phone':
        user_data[user_id]['phone'] = message.text

        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_info = user_data[user_id]
        try:
            text = (f"‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n"
                    f"–ü–∏—Ç–∞–Ω–Ω—è: {user_info['question']}\n"
                    f"–Ü–Ω—Å—Ç–∏—Ç—É—Ç: {user_info['faculty']}\n"
                    f"–ö—É—Ä—Å: {user_info['course']}\n"
                    f"–ì—Ä—É–ø–∞: {user_info['group']}\n"
                    f"–ü–Ü–ë: {user_info['name']}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_info['phone']}\n"
                    f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{message.from_user.username if message.from_user.username else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}")
        except:
            text = (f"üìö –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º—ñ–Ω —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤:\n"
                    f"–Ü–Ω—Å—Ç–∏—Ç—É—Ç: {user_info['faculty']}\n"
                    f"–ö—É—Ä—Å: {user_info['course']}\n"
                    f"–ì—Ä—É–ø–∞: {user_info['group']}\n"
                    f"–ü–Ü–ë: {user_info['name']}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_info['phone']}\n"
                    f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{message.from_user.username if message.from_user.username else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}")

        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        try:
            await message.bot.send_message(ADMIN_CHAT_ID, text)
            logging.info(f"Sent application to admin chat ID {ADMIN_CHAT_ID}")
            await message.answer('–ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –π –∑–≤ º—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º! –©–æ–± –ø–æ–¥–∞—Ç–∏ —â–µ –æ–¥–Ω—É '
                                 '–∑–∞—è–≤–∫—É, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ.',
                                 reply_markup=OptionKeyboard)
        except Exception as e:
            logging.error(f"Failed to send message to admin: {e}")
            await message.answer('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤–∞—à–æ—ó –∑–∞—è–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', reply_markup=OptionKeyboard)

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        clear_user_data(user_id)
        logging.info(f"Cleared user data for {user_id}")


def register_handlers_apply(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è —Ä–æ–±–æ—Ç–∏ —ñ–∑ –∑–∞—è–≤–∫–∞–º–∏."""
    dp.message.register(apply_handler, lambda msg: msg.text == '–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –æ–±–º—ñ–Ω —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤')
    dp.message.register(collect_data, lambda msg: msg.chat.id in user_data)
